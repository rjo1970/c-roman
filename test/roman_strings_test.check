#include <string.h>
#include <stdio.h>
#include "../lib_roman.c"

#test roman_numbers_can_be_capitalized
  char *lowercased = "mcmlxxxiv";
  char *result = uppercased_roman(lowercased);
  fail_unless(strcmp(result, "MCMLXXXIV") == 0);
  free(result);

#test can_replace_substring_starting_at_end
  char *haystack = "MIV";
  char *needle = proper_translation[0];
  char *needle_replacement = simple_translation[0];
  char *result;
  result = replace_substring(haystack, needle, needle_replacement);
  fail_unless(strcmp(result, "MIIII") == 0);
  free(result);

#test can_replace_substring_starting_at_beginning
  char *haystack = "CDI";
  char *needle = "CD";
  char *needle_replacement = "CCCC";
  char *result;
  result = replace_substring(haystack, needle, needle_replacement);
  fail_unless(strcmp(result, "CCCCI"));
  free(result);

#test can_replace_substring_starting_in_middle
  char *haystack = "MCDI";
  char *needle = "CD";
  char *needle_replacement = "CCCC";
  char *result;
  result = replace_substring(haystack, needle, needle_replacement);
  fail_unless(strcmp(result, "MCCCCI"));
  free(result);

#test gracefully_returns_same_value_if_no_replaced_string
  char *haystack = "L";
  char *needle = "IV";
  char *needle_replacement="IIII";
  char *result;
  result = replace_substring(haystack, needle, needle_replacement);
  fail_unless(strcmp(result, "L") == 0);
  free(result);


#test can_expand_roman_iv
  char *haystack = "IV";
  char *result;
  char *intermediate = strdup(haystack);
  int i;
  for(i = 0; i< TRANSLATION_SIZE; ++i) {
    result = replace_substring(intermediate, proper_translation[i], simple_translation[i]);
    free(intermediate);
    intermediate = result;
  }
  fail_unless(strcmp(result, "IIII") == 0);
  free(result);
